name: 'Terraform Apply'

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-apply.yml'

permissions:
  contents: read
  id-token: write

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-terraform-apply
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.7
        terraform_wrapper: false

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Get secrets from AWS Secrets Manager
      id: get_secrets
      uses: aws-actions/aws-secrets-manager-get-secrets@v1
      with:
        secret-ids:
          MONGODB_ATLAS_PUBLIC_KEY,
          MONGODB_ATLAS_PRIVATE_KEY,
          MONGODB_ATLAS_ORG_ID,
          DATABASE_PASSWORD,
          APP_PASSWORD,
          READONLY_PASSWORD
        aws-region: us-east-1

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan
      env:
        TF_VAR_mongodb_atlas_public_key: ${{ steps.get_secrets.outputs.MONGODB_ATLAS_PUBLIC_KEY }}
        TF_VAR_mongodb_atlas_private_key: ${{ steps.get_secrets.outputs.MONGODB_ATLAS_PRIVATE_KEY }}
        TF_VAR_mongodb_atlas_org_id: ${{ steps.get_secrets.outputs.MONGODB_ATLAS_ORG_ID }}
        TF_VAR_database_password: ${{ steps.get_secrets.outputs.DATABASE_PASSWORD }}
        TF_VAR_app_password: ${{ steps.get_secrets.outputs.APP_PASSWORD }}
        TF_VAR_readonly_password: ${{ steps.get_secrets.outputs.READONLY_PASSWORD }}

    - name: Terraform Show Plan
      id: show
      run: terraform show -no-color tfplan

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false tfplan
      env:
        TF_VAR_mongodb_atlas_public_key: ${{ steps.get_secrets.outputs.MONGODB_ATLAS_PUBLIC_KEY }}
        TF_VAR_mongodb_atlas_private_key: ${{ steps.get_secrets.outputs.MONGODB_ATLAS_PRIVATE_KEY }}
        TF_VAR_mongodb_atlas_org_id: ${{ steps.get_secrets.outputs.MONGODB_ATLAS_ORG_ID }}
        TF_VAR_database_password: ${{ steps.get_secrets.outputs.DATABASE_PASSWORD }}
        TF_VAR_app_password: ${{ steps.get_secrets.outputs.APP_PASSWORD }}
        TF_VAR_readonly_password: ${{ steps.get_secrets.outputs.READONLY_PASSWORD }}

    - name: Terraform Output
      id: output
      run: terraform output -json > terraform-outputs.json

    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: terraform-outputs.json
        retention-days: 30

    - name: Notify Success
      if: success()
      run: |
        echo "✅ Terraform apply completed successfully!"
        echo "📊 Infrastructure has been updated."

    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ Terraform apply failed!"
        echo "🔍 Please check the logs for details."
        exit 1

    - name: Security Scan Post-Apply
      if: success()
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-results.json'

    - name: Upload Security Scan Results
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: trivy-results.json
        retention-days: 30